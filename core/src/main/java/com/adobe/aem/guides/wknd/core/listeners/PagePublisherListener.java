package com.adobe.aem.guides.wknd.core.listeners;

import com.adobe.aem.guides.wknd.core.domains.product.ProductConstants;
import com.adobe.aem.guides.wknd.core.services.ProductPagesGenerator;
import com.adobe.aem.guides.wknd.core.services.access.impl.ProductResourceResolverProvider;
import com.day.cq.replication.ReplicationActionType;
import com.day.cq.replication.ReplicationException;
import com.day.cq.replication.Replicator;
import lombok.extern.slf4j.Slf4j;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.api.resource.observation.ResourceChange;
import org.apache.sling.api.resource.observation.ResourceChangeListener;
import org.jetbrains.annotations.NotNull;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import javax.jcr.Session;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component(
        service = ResourceChangeListener.class
    ,   immediate = true
    ,   property = {
            ResourceChangeListener.PATHS + "=" + "glob:/content/wknd/**/products/product*"
        ,   ResourceChangeListener.CHANGES + "=" + "ADDED"
        ,   ResourceChangeListener.CHANGES + "=" + "CHANGED"
        ,   ResourceChangeListener.CHANGES + "=" + "REMOVED"
    }
)
@Slf4j
public class PagePublisherListener implements ResourceChangeListener {

    private static final Map<ResourceChange.ChangeType, ReplicationActionType> actions = new HashMap<ResourceChange.ChangeType, ReplicationActionType>(){{
        put(ResourceChange.ChangeType.ADDED,   ReplicationActionType.ACTIVATE  );
        put(ResourceChange.ChangeType.REMOVED, ReplicationActionType.DEACTIVATE);
    }};

    @Reference
    private ProductResourceResolverProvider resourceResolverProvider;

    @Reference
    private Replicator replicator;

    @Reference
    private ProductPagesGenerator productPagesGenerator;

    @Override
    public void onChange(@NotNull List<ResourceChange> resourceChanges) {
        String pagesPathRoot = productPagesGenerator.getPagesRoot();
        try (ResourceResolver resourceResolver = resourceResolverProvider.getResourceResolver()) {
            Session session = resourceResolver.adaptTo(Session.class);
            resourceChanges.forEach(change -> {
                String path = change.getPath();
                if (isRequirePublishing(path, pagesPathRoot, resourceResolver)) {
                    log.info(String.format("Found autogenerated page %s", path));
                    ReplicationActionType replicationAction = actions.get(change.getType());
                    if (replicationAction != null) {
                        try {
                            log.info(String.format("Attempt of replication action %s for  %s", replicationAction, path));
                            replicator.replicate(session, replicationAction, path);
                            log.info(String.format("Replication action %s success for %s", replicationAction, path));
                        } catch (ReplicationException e) {
                            log.error(String.format("Replication action %s fail: %s", replicationAction, e.getMessage()));
                        }
                    } else {
                        log.info(String.format("No replication action for %s with change %s", path, change.getType()));
                    }
                }

            });
        }
    }

    private boolean isRequirePublishing(String path, String pagesPathRoot, ResourceResolver resourceResolver) {
        if (!path.contains(pagesPathRoot)) return false;
        String resourceRelPath = path.substring(path.indexOf(pagesPathRoot) + pagesPathRoot.length());
        String pageNameRegexp = "^[/\\\\][^/\\\\]+$";
        Pattern pattern = Pattern.compile(pageNameRegexp);
        Matcher matcher = pattern.matcher(resourceRelPath);
        if (matcher.find()) {
            //  check for /jcr:content/product['autogenerated'] flag
            Resource pageResource = resourceResolver.getResource(path);
            if (pageResource != null) {
                Resource contentNode = pageResource.getChild("jcr:content");
                if (contentNode != null && contentNode.getResourceType().equals(ProductConstants.PRODUCT_PAGE_RESOURCE_TYPE)){
                    Resource product = contentNode.getChild("product");
                    if (product != null) {
                        ValueMap props = product.adaptTo(ValueMap.class);
                        Boolean autogenerated = props.get(ProductConstants.FIELD_NAME_AUTOGENERATED, Boolean.class);
                        return autogenerated != null ? autogenerated : false;
                    }
                }
            }
        }
        return false;
    }
}
